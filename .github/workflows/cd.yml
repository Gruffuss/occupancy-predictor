name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to LXC Container
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.LXC_HOST }}
        username: ${{ secrets.LXC_USER }}
        key: ${{ secrets.LXC_SSH_KEY }}
        script: |
          # Pull latest image
          docker pull ${{ needs.build.outputs.image-tag }}
          
          # Stop existing container
          docker stop occupancy-predictor || true
          docker rm occupancy-predictor || true
          
          # Start new container
          docker run -d \
            --name occupancy-predictor \
            --restart unless-stopped \
            --network host \
            -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
            -e HA_URL=${{ secrets.HA_URL }} \
            -e HA_TOKEN=${{ secrets.HA_TOKEN }} \
            -e GRAFANA_URL=${{ secrets.GRAFANA_URL }} \
            -e GRAFANA_API_KEY=${{ secrets.GRAFANA_API_KEY }} \
            -e ENVIRONMENT=production \
            -v /opt/occupancy-predictor/data:/app/data \
            -v /opt/occupancy-predictor/logs:/app/logs \
            ${{ needs.build.outputs.image-tag }}
          
          # Wait for health check
          sleep 30
          
          # Verify deployment
          curl -f http://localhost:8000/health || exit 1
          
          echo "Deployment successful!"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Occupancy Predictor deployment ${{ job.status }}
          Image: ${{ needs.build.outputs.image-tag }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}